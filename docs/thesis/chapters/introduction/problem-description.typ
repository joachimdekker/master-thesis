= Problem Description<sec:problem-description>
In this thesis, we refer to the Excel compiler as a tool that accepts an Excel file together with sets of input and output cells, and produces a self-contained class library. This library is then to be used in external tools and computes the same outputs for any given inputs as the original spreadsheet.

Automatically converting Excel workbooks to high-performing, readable code is not straightforward. Excel sheets are often large and result in large compositions of formulae, which in turn result in complex semantics. The desired Excel compiler should support these formulae and the different execution paths these Excel workbooks have to offer. Furthermore, Excel exhibits complex semantics with cyclic dependencies, dynamic range operators, and array formulas.

Human auditors must be able to inspect the program. Besides it needing to be semantically equivalent, it needs to be readable, using idiomatic code. The auditor should be able to easily understand the code instead of deciphering bytecode. Given that the spreadsheet structure does not easily compile to imperative code, a big challenge tackled in this thesis is understanding the semantics of a spreadsheet and converting it to imperative code.